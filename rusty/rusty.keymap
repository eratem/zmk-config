/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/mouse.h>
#include "keymap_ch_de.h"

// Layer definitions
    #define BASE 0
    #define SYML 1
    #define SYMR 2
	#define CHEESE 3
    #define NUM 4
	#define NAV 5
	// #define MOUSE 4
    #define FUNC 6
    #define SETTINGS 7
// -----------------

// Helper Aliases for formatting
#define ____ &trans
#define xxxx &none

&mt {
	flavor = "balanced";
	tapping_term_ms = <175>;
};

&lt {
	flavor = "balanced";
	tapping_term_ms = <175>;
};

&sk {
	release-after-ms = <500>;
	quick-release;
};

/ {
	macros {
		ZMK_MACRO(m_carr,
			wait-ms = <30>;
			tap-ms = <40>;
			bindings = <&kp CH_CARR &kp SPACE>;
		)
		ZMK_MACRO(m_grv,
			wait-ms = <30>;
			tap-ms = <40>;
			bindings = <&kp CH_GRV &kp SPACE>;
		)
		ZMK_MACRO(m_acut,
			wait-ms = <30>;
			tap-ms = <40>;
			bindings = <&kp CH_ACUT &kp CH_ACUT>;
		)
		ZMK_MACRO(m_tild,
			wait-ms = <30>;
			tap-ms = <40>;
			bindings = <&kp CH_TILD &kp SPACE>;
		)
		ZMK_MACRO(m_s_oe,
			wait-ms = <30>;
			tap-ms = <40>;
			bindings = <&kp CH_OE>;
		)
		ZMK_MACRO(m_s_ue,
			wait-ms = <30>;
			tap-ms = <40>;
			bindings = <&kp CH_UE>;
		)
		ZMK_MACRO(m_s_ae,
			wait-ms = <30>;
			tap-ms = <40>;
			bindings = <&kp CH_AE>;
		)
		m_ue: m_ue {
			compatible = "zmk,behavior-macro";
			label = "M_UE";
			#binding-cells = <0>;
			wait-ms = <30>;
			tap-ms = <40>;
			bindings
				= <&macro_tap &kp CH_UML>
				, <&macro_press &kp LSHFT>
				, <&macro_tap &kp U>
				, <&macro_release &kp LSHFT>
				;
		};
		m_oe: m_oe {
			compatible = "zmk,behavior-macro";
			label = "M_OE";
			#binding-cells = <0>;
			wait-ms = <30>;
			tap-ms = <40>;
			bindings
				= <&macro_tap &kp CH_UML>
				, <&macro_press &kp LSHFT>
				, <&macro_tap &kp O>
				, <&macro_release &kp LSHFT>
				;
		};
		m_ae: m_ae {
			compatible = "zmk,behavior-macro";
			label = "M_AE";
			#binding-cells = <0>;
			wait-ms = <30>;
			tap-ms = <40>;
			bindings
				= <&macro_tap &kp CH_UML>
				, <&macro_press &kp LSHFT>
				, <&macro_tap &kp A>
				, <&macro_release &kp LSHFT>
				;
		};
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
	};
	combos {
		compatible = "zmk,combos";
		combo_esc {
			timeout-ms = <75>;
			key-positions = <0 10>;
			bindings = <&kp ESC>;
		};
		combo_lprn {
			timeout-ms = <50>;
			key-positions = <2 12>;
			bindings = <&kp CH_LPRN>;
		};
		combo_rprn {
			timeout-ms = <50>;
			key-positions = <7 17>;
			bindings = <&kp CH_RPRN>;
		};
		combo_lbrc {
			timeout-ms = <50>;
			key-positions = <3 13>;
			bindings = <&kp CH_LBRC>;
		};
		combo_rbrc {
			timeout-ms = <50>;
			key-positions = <6 16>;
			bindings = <&kp CH_RBRC>;
		};
		combo_lcbr {
			timeout-ms = <50>;
			key-positions = <1 11>;
			bindings = <&kp CH_LCBR>;
		};
		combo_rcbr {
			timeout-ms = <50>;
			key-positions = <8 18>;
			bindings = <&kp CH_RCBR>;
		};
		combo_more {
			timeout-ms = <75>;
			key-positions = <5 15>;
			bindings = <&kp CH_MORE>;
		};
		combo_less {
			timeout-ms = <75>;
			key-positions = <4 14>;
			bindings = <&kp CH_LESS>;
		};
		combo_scln {
			timeout-ms = <75>;
			key-positions = <17 27>;
			bindings = <&kp CH_SCLN>;
		};
		combo_coln {
			timeout-ms = <75>;
			key-positions = <18 28>;
			bindings = <&kp CH_COLN>;
		};
		combo_qbspc {
			timeout-ms = <100>;
			key-positions = <30 31>;
			bindings = <&kp LC(BSPC)>;
		};
	};
	behaviors {	
		rp: right_hand_positional_hold_layer {
			compatible = "zmk,behavior-hold-tap";
			label = "RIGHT_POSITIONAL_HOLD_LAYER";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <150>;
			quick-tap-ms = <150>;
			bindings = <&mo>, <&kp>;
			hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 20 21 22 23 24 25 26 27 28 29>;
		};
		lp: left_hand_positional_hold_layer {
			compatible = "zmk,behavior-hold-tap";
			label = "LEFT_POSITIONAL_HOLD_LAYER";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <150>;
			quick-tap-ms = <150>;
			bindings = <&mo>, <&kp>;
			hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29>;
		};
		mt_oe: mod_tap_oe {
			compatible = "zmk,behavior-hold-tap";
			label = "MOD_TAP_OE";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <150>;
			bindings = <&m_oe>, <&m_s_oe>;
		};
        mt_ue: mod_tap_ue {
			compatible = "zmk,behavior-hold-tap";
			label = "MOD_TAP_UE";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <150>;
			bindings = <&m_ue>, <&m_s_ue>;
		};
        mt_ae: mod_tap_ae {
			compatible = "zmk,behavior-hold-tap";
			label = "MOD_TAP_AE";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <150>;
			bindings = <&m_ae>, <&m_s_ae>;
		};
	};
    keymap {
            compatible = "zmk,keymap";

        // Base alpha layer
       		default_layer {
		bindings = <
		&kp Q          &kp W       &kp F       &kp P  &kp B              &kp J  &kp L  &kp U       &kp CH_Y       &sl CHEESE 
		&kp A          &lp NAV R   &lp SYMR S  &kp T  &kp G              &kp M  &kp N  &rp SYML E  &rp NUM I      &kp O
		&mt LALT CH_Z  &mt LGUI X  &kp C       &kp D  &mt LSHFT V        &kp K  &kp H  &kp COMMA   &mt LGUI DOT   &mt RALT CH_QUOT
                                            &kp BSPC  &mt LCTRL SPACE    &sk LSHFT  &lt FUNC ENTER
		>;
		};

        // Left Symbol Layer
       		symleft_layer {
		bindings = <
		&kp DEL      &kp CH_PERC  &kp CH_HASH  &kp CH_DLR   &kp CH_LESS    xxxx       xxxx  xxxx  xxxx       xxxx
		&kp TAB      &kp CH_AST   &kp CH_PIPE  &kp CH_SLSH  &kp CH_TILD    xxxx       xxxx  xxxx  xxxx       xxxx
		&kp LS(TAB)  &kp CH_EURO  &kp CH_GRV   &kp CH_BSLS  xxxx           &kp LSHFT  xxxx  xxxx  &kp LGUI  &kp LALT
					                                  ____  ____           ____  ____
		>;
		};

        // Right Symbol Layer
		    symright_layer {
		bindings = <
		&kp DEL      xxxx      xxxx  xxxx  xxxx         &kp CH_MORE  &kp CH_AT    &kp CH_PLUS  &kp CH_AMPR  &kp CH_UNDS
		&kp TAB      xxxx      xxxx  xxxx  xxxx         &kp CH_RING  &kp CH_DQOT  &kp CH_QST   &kp CH_EXLM  &kp CH_MINS
		&kp LS(TAB)  &kp LGUI  xxxx  xxxx  &kp LSHFT           xxxx  &kp CH_EQL   &kp CH_ACUT  &kp CH_CARR  &kp CH_PARA
		                             ____  ____                ____  ____
		>;
		};

        // Swiss Special Symbol Layer
		    cheese_layer {
		bindings = <
		____        ____  ____        ____  ____             ____  ____  &mt_ue 0 0   ____         &kp CH_UML
		&mt_ae 0 0  ____  ____        ____  &kp CH_TILD      ____  ____  ____         ____         &mt_oe 0 0
		____        ____  &kp CH_GRV  ____  ____             ____  ____  &kp CH_ACUT  &kp CH_CARR  ____
		                              ____  ____             ____  ____
		>;
		};

        // Numbers (Left Hand)
       		num_layer {
		bindings = <
		&kp N7     &kp N6     &kp N5     &kp N4           &kp N9       xxxx       xxxx  xxxx  xxxx      xxxx
		&kp N3     &kp N2     &kp N1     &kp N0           &kp N8       xxxx       xxxx  xxxx  xxxx      xxxx
		&kp LC(Z)  &kp LC(X)  &kp LC(C)  &mt CH_COLN DOT  &kp LC(V)    &kp LSHFT  xxxx  xxxx  &kp LGUI  &kp LALT
          				                            ____  ____         ____  ____
		>;
		};
        // Navigation (Right Hand)
       		nav_layer {
		bindings = <
		xxxx      xxxx      xxxx  xxxx  xxxx         xxxx  &kp HOME     &kp PG_DN  &kp PG_UP  &kp END
		xxxx      xxxx      xxxx  xxxx  xxxx         xxxx  &kp LEFT     &kp DOWN   &kp UP     &kp RIGHT
		&kp LALT  &kp LGUI  xxxx  xxxx  &kp LSHFT    xxxx  &kp LS(TAB)  &kp DEL    xxxx       &kp TAB
          	                      ____  ____         ____  ____
		>;
		};
        // Mouse Layer
//     		mouse_layer {
//		bindings = <
//		xxxx     xxxx      xxxx     xxxx      xxxx        xxxx  &mwh SCROLL_LEFT  &mwh SCROLL_DOWN  &mwh SCROLL_UP  &mwh SCROLL_RIGHT
//		&mkp MB5 &mkp MB4  &mkp MB3 &mkp MB1  xxxx    &to BASE  &mmv MOVE_LEFT    &mmv MOVE_DOWN    &mmv MOVE_UP    &mmv MOVE_RIGHT
//		xxxx     xxxx      xxxx     &mkp MB2  xxxx        xxxx  xxxx              xxxx              xxxx            xxxx
//	                                    ____  ____        ____  ____
//		>;
//		};
        // Function Keys
       		func_layer {
		bindings = <
		&kp F7  &kp F6     &kp F5      &kp F4   &kp F9             xxxx  xxxx  xxxx  xxxx  xxxx
		&kp F3  &kp F2     &kp F1      &kp F10  &kp F8             xxxx  xxxx  xxxx  xxxx  xxxx
		xxxx    &kp PSCRN  &kp K_CALC  &kp F12  &kp F11    &to SETTINGS  xxxx  xxxx  xxxx  xxxx
                                          ____  ____               ____  ____
		>;
		};

        // Used to change the keyboard's settings.
       		settings_layer {
		bindings = <
		&bootloader   &bt BT_PRV    &bt BT_NXT    xxxx          xxxx              xxxx  xxxx          xxxx          xxxx  &bootloader 
		&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR    &to BASE  &bt BT_SEL 4  &bt BT_SEL 5  xxxx  xxxx
		xxxx          xxxx          xxxx          xxxx          xxxx              xxxx  xxxx          xxxx          xxxx  xxxx
          				                                  ____  ____              ____  ____
		>;
		};
        
	};
};
