/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/mouse.h>
#include "keymap_ch_de.h"

// Layer definitions
    #define BASE 0
    #define SYML 1
    #define SYMR 2
    #define NUM 3
	#define NAV 4
	// #define MOUSE 4
    #define FUNC 5
    #define SETTINGS 6
// -----------------

// Helper Aliases for formatting
#define ____ &trans
#define xxxx &none

&mt {
	flavor = "balanced";
	tapping_term_ms = <175>;
};

&lt {
	flavor = "balanced";
	tapping_term_ms = <175>;
};

&sk {
	release-after-ms = <500>;
	quick-release;
};

/ {
	combos {
		compatible = "zmk,combos";
		combo_esc {
			timeout-ms = <75>;
			key-positions = <0 10>;
			bindings = <&kp ESC>;
		};
		combo_lprn {
			timeout-ms = <50>;
			key-positions = <2 12>;
			bindings = <&kp CH_LPRN>;
		};
		combo_rprn {
			timeout-ms = <50>;
			key-positions = <7 17>;
			bindings = <&kp CH_RPRN>;
		};
		combo_lbrc {
			timeout-ms = <50>;
			key-positions = <3 13>;
			bindings = <&kp CH_LBRC>;
		};
		combo_rbrc {
			timeout-ms = <50>;
			key-positions = <6 16>;
			bindings = <&kp CH_RBRC>;
		};
		combo_lcbr {
			timeout-ms = <50>;
			key-positions = <1 11>;
			bindings = <&kp CH_LCBR>;
		};
		combo_rcbr {
			timeout-ms = <50>;
			key-positions = <8 18>;
			bindings = <&kp CH_RCBR>;
		};
		combo_more {
			timeout-ms = <75>;
			key-positions = <5 15>;
			bindings = <&kp CH_MORE>;
		};
		combo_less {
			timeout-ms = <75>;
			key-positions = <4 14>;
			bindings = <&kp CH_LESS>;
		};
		combo_scln {
			timeout-ms = <75>;
			key-positions = <17 27>;
			bindings = <&kp CH_SCLN>;
		};
		combo_dqot {
			timeout-ms = <75>;
			key-positions = <18 28>;
			bindings = <&kp CH_DQOT>;
		};
		combo_coln {
			timeout-ms = <75>;
			key-positions = <19 29>;
			bindings = <&kp CH_COLN>;
		};
		combo_qbspc {
			timeout-ms = <100>;
			key-positions = <30 31>;
			bindings = <&kp LC(BSPC)>;
		};
	};
	behaviors {	
		rp: right_hand_positional_hold_layer {
			compatible = "zmk,behavior-hold-tap";
			label = "RIGHT_POSITIONAL_HOLD_LAYER";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <150>;
			quick-tap-ms = <150>;
			bindings = <&mo>, <&kp>;
			hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 20 21 22 23 24 25 26 27 28 29>;
		};
		lp: left_hand_positional_hold_layer {
			compatible = "zmk,behavior-hold-tap";
			label = "LEFT_POSITIONAL_HOLD_LAYER";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <150>;
			quick-tap-ms = <150>;
			bindings = <&mo>, <&kp>;
			hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29>;
		};
	};
    keymap {
            compatible = "zmk,keymap";

        // Base alpha layer
       		default_layer {
		bindings = <
		&kp Q          &kp W       &kp F       &kp P       &kp B              &kp J  &kp L       &kp U       &kp CH_Y      &kp CH_DIER 
		&kp A          &kp R       &lp SYMR S  &lp NAV T   &kp G              &kp M  &rp NUM N   &rp SYML E  &kp I         &kp O
		&mt LALT CH_Z  &mt LGUI X  &kp C       &lp FUNC D  &mt LSHFT V        &kp K  &rp FUNC H  &kp COMMA   &mt LGUI DOT  &mt RALT CH_QUOT
                                                 &kp BSPC  &mt LCTRL SPACE    &sk LSHFT  &kp ENTER
		>;
		};

        // Left Symbol Layer
       		symleft_layer {
		bindings = <
		&kp DEL      &kp CH_PERC  &kp CH_HASH  &kp CH_DLR   xxxx           xxxx       xxxx  xxxx  xxxx       xxxx
		&kp TAB      &kp CH_PAST  &kp CH_PIPE  &kp CH_SLSH  &kp CH_TILD    xxxx       xxxx  xxxx  xxxx       xxxx
		&kp LS(TAB)  &kp CH_EURO  &kp CH_GRV   &kp CH_BSLS  xxxx           &kp LSHFT  xxxx  xxxx  &kp LGUI  &kp LALT
					                                  ____  ____           ____  ____
		>;
		};

        // Right Symbol Layer
		    symright_layer {
		bindings = <
		&kp DEL      xxxx      xxxx  xxxx  xxxx                xxxx  &kp CH_AT    &kp CH_PLUS  &kp CH_AMPR  &kp CH_UNDS
		&kp TAB      xxxx      xxxx  xxxx  xxxx         &kp CH_RING  &kp CH_DQOT  &kp CH_QST   &kp CH_EXLM  &kp CH_MINS
		&kp LS(TAB)  &kp LGUI  xxxx  xxxx  &kp LSHFT           xxxx  &kp CH_EQL   &kp CH_ACUT  &kp CH_CARR  &kp CH_PARA
		                             ____  ____                ____  ____
		>;
		};

        // Numbers (Left Hand)
       		num_layer {
		bindings = <
		&kp N7          &kp N6          &kp N5          &kp N4           &kp N9           xxxx  xxxx  xxxx  xxxx  xxxx
		&mt CH_PLUS N3  &mt CH_MINS N2  &mt CH_PAST N1  &mt CH_SLSH N0   &mt CH_EQL N8    xxxx  xxxx  xxxx  xxxx  xxxx
		&kp LC(Z)       &kp LC(X)       &kp LC(C)       &mt CH_COLN DOT  &kp LC(V)        xxxx  xxxx  ____  ____  ____
          				                                           ____  ____             ____  ____
		>;
		};
        // Navigation (Right Hand)
       		nav_layer {
		bindings = <
		xxxx  xxxx  xxxx  xxxx  xxxx    xxxx  &kp HOME     &kp PG_DN  &kp PG_UP  &kp END
		xxxx  xxxx  xxxx  xxxx  xxxx    xxxx  &kp LEFT     &kp DOWN   &kp UP     &kp RIGHT
		xxxx  xxxx  xxxx  xxxx  xxxx    xxxx  &kp LS(TAB)  &kp DEL    xxxx       &kp TAB
          	              ____  ____    ____  ____
		>;
		};
        // Mouse Layer
//     		mouse_layer {
//		bindings = <
//		xxxx     xxxx      xxxx     xxxx      xxxx        xxxx  &mwh SCROLL_LEFT  &mwh SCROLL_DOWN  &mwh SCROLL_UP  &mwh SCROLL_RIGHT
//		&mkp MB5 &mkp MB4  &mkp MB3 &mkp MB1  xxxx    &to BASE  &mmv MOVE_LEFT    &mmv MOVE_DOWN    &mmv MOVE_UP    &mmv MOVE_RIGHT
//		xxxx     xxxx      xxxx     &mkp MB2  xxxx        xxxx  xxxx              xxxx              xxxx            xxxx
//	                                    ____  ____        ____  ____
//		>;
//		};
        // Function Keys
       		func_layer {
		bindings = <
		&kp F7  &kp F6     &kp F5      &kp F4   &kp F9             xxxx  xxxx  xxxx  xxxx  xxxx
		&kp F3  &kp F2     &kp F1      &kp F10  &kp F8             xxxx  xxxx  xxxx  xxxx  xxxx
		xxxx    &kp PSCRN  &kp K_CALC  &kp F12  &kp F11    &to SETTINGS  xxxx  xxxx  xxxx  xxxx
                                          ____  ____               ____  ____
		>;
		};

        // Used to change the keyboard's settings.
       		settings_layer {
		bindings = <
		&bootloader   xxxx          xxxx          xxxx          xxxx              xxxx  xxxx  xxxx  xxxx  &bootloader 
		&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR    &to BASE  xxxx  xxxx  xxxx  xxxx
		xxxx          xxxx          xxxx          xxxx          xxxx              xxxx  xxxx  xxxx  xxxx  xxxx
          				                                  ____  ____              ____  ____
		>;
		};
        
	};
};
